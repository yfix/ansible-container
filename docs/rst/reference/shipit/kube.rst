Kube (Kubernetes)
=================




Requirements
''''''''''''

The Ansible role generated by *shipit* includes multiple Ansible modules in the role *library* directory that interact
with the Kubernetes cluster to create services and deployments. Communication wth the cluster is performed using the
*kubectl* client. To run the role, the *kubectl* client must be installed.

If you're running Kubernetes locally, you may already have the *kubectl* client installed. If not,
see the `Google Cloud SDK - Getting Started <https://cloud.google.com/sdk/docs/>`_ for instructions on installing the
SDK and *kubectl*. There is also an Ansible role, `ansible/role-install-gcloud <https://github.com/ansible/role-install-gcloud>`_
to help automate the installation.


Assumptions
'''''''''''

For the purposes of this document, Kubernetes will refer to `Google's Container Engine <https://cloud.google.com/container-engine/>`_.
The private registry used in the examples is `Google's Container Registry <https://cloud.google.com/container-engine/>`_. A project
is a project created at Google Compute Engine, and a cluster is a cluster created in the project using Google Container Engine.


Authentication
''''''''''''''

To authenticate with Kubernetes (Google Contaner Engine), you can manually run `gcloud init`. A better way, and a way that
can be easily automated is to create a `service account <https://cloud.google.com/compute/docs/access/create-enable-service-accounts-for-instances>`_
and use the associated key file.

Once you have your service account, download the associated JSON key file. This is a private key for accessing the cluster, so
secure it just as you would an SSH private key file.

Use the following command, changing the path and name of the key file, to authenticate with the cluster:

.. code-block:: bash

    $ gcloud auth activate-service-account --key-file ~/path/to/sercure/Keyfile_XXXXXXXX.json

The above command will add your credentials to the list of available configurations and make it the default. To see
all available configurations:

.. code-block:: bash

    $ gcloud config configurations list

Use the `gcloud config set` command to adjust the Project, Default Zone and Default Region settings.

.. code-block:: bash

    $ glcoud config set project foo

.. code-block:: bash

    $ gcloud config set compute/zone zone3

To change the active account:

.. code-block:: bash

    $ gcloud auth login <email_address>@<project-id>.iam.gserviceaccount.com --activate

Example Deployment
''''''''''''''''''

The workflow to deploy to Kubernetes using ansible-container is:

+ Build the images with `ansible-container build`
+ Push the build images to the cloud with `ansible-container push`.
+ Create the deployment role and playbook with `ansible container shipit`.
+ Run the playbook with `ansible-playbook shipit_<engine_name>.yml`

Build the Images
----------------

Using the example project, build the images

.. code-block:: bash

    $ cd example
    $ ansible-container build

Use `docker images` to view the available images:

.. code-block:: bash

    $ docker images

    REPOSITORY                                   TAG                 IMAGE ID            CREATED             SIZE
    example-django                               20160622155105      2463f6029944        3 hours ago         794.8 MB
    example-django                               latest              2463f6029944        3 hours ago         794.8 MB
    example-postgresql                           20160622155105      e936d28ff596        3 hours ago         764.1 MB
    example-postgresql                           latest              e936d28ff596        3 hours ago         764.1 MB
    example-static                               20160622155105      c1a1f10afd4e        3 hours ago         796 MB
    example-static                               latest              c1a1f10afd4e        3 hours ago         796 MB
    example-gulp                                 20160622155105      a06c743d37e2        3 hours ago         331 MB
    example-gulp                                 latest              a06c743d37e2        3 hours ago         331 MB
    ansible-container-builder                    latest              558a49560346        3 hours ago         899.3


Pushing Images to the Cloud
---------------------------

To deploy to Kubernetes, the cluster will need access to the new images, which requires pushing them into a registry
that the cluster can pull from. This can be done using the `ansible-contianer push` comand. The first time a push is executed
for a registry, authentication credentials must be included. For kubernetes, use Google Container registry and authenticate
using the JSON key file for your service account. For example:

.. code-block:: bash

    $ ansible-container push --username _json_key --password "$(cat ~/path/to/Keyfile_XXXXXXXX.json)" --url https://grc.io --namespace my-project-id-XXXX --registry-name google

In the above example, use --namespace to provide the ID of your Google Compute Engine project and *--registry-name* to give a descriptive name to this
registry. Subsequent pushes to the this registry will be done using the *--registry-name* value provided here.

After successful authentication, ansible-container will create a registry.yml file in your project ansible directory. A reference to any registries pushed to will
be kept in this file for convenience. No credentials are stored in registry.yml, only the name, namespace and url. Credentials are stored automatically by Docker
in ~/.docker/config.json.

In the future, when you want to push updated images to Google Container Registry, you can simply do the following:

.. code-block:: bash

   $ ansible-container push --push-to google

The value given for the --push-to option will match the value given for the *--registry-name* option during the first push.


Shipit - Build the Deployment Role
----------------------------------

Next, run the *shipit* command to generate the role and playbook:

.. code-block:: bash

   $ ansible-container shipit --pull-from google

The *--pull-from* option tells the shipit command how to reference images needed to build containers on the Kubernetes cluster. This is how the cluster knows
from where to pull images

